import { Request, Response } from "express";
import { Vulnerability } from "models/vulnerability";
import { errorResponse, successResponse } from "utils/responseFormat";
import { fetchCVE } from "utils/vuln";

async function get(req: Request, res: Response) {
  const { cveId: id } = req.params;
  const data = await fetchCVE(id);
  if (data instanceof Error) {
    return res.json(errorResponse(data.message));
  }
  const cveId = data.id;
  const desc = data.summary;
  const score = data.cvss.v3 === undefined ? data.cvss.v2 : data.cvss.v3;
  const cwes = data.cwes; // Array of CWEs
  const vendor = Object.keys(data.vendors)[0];
  const product = data.vendors[`${vendor}`][0];
  const version = data.raw_nvd_data.configurations.nodes[0].cpe_match.map(
    ({ cpe23Uri }: { cpe23Uri: string; vulnerable: boolean }) =>
      cpe23Uri.split(":")[5]
  );
  const returnObject = {
    cveId,
    description: desc,
    score,
    cwes,
    vendor,
    product,
    version,
  };
  return res.json(successResponse(returnObject, "CVE fetched successfully"));
}

async function getAll(req: Request, res: Response) {
  try {
    const vulns = await Vulnerability.find();
    return res.json(
      successResponse(vulns, "Vulnerabilities retrieved successfully")
    );
  } catch (error) {
    return res.json(errorResponse(`Internal server error: ${error}`));
  }
}

async function create(req: Request, res: Response) {
  const { type, data } = req.body;
  if (type === "single") {
    try {
      const { cveId } = data;
      const vulnExists = await Vulnerability.findOne({ cveId });
      if (vulnExists) {
        return res.json(errorResponse("Vulnerability already exists"));
      }
      const newVuln = await Vulnerability.create(data);
      return res.json(successResponse(newVuln, "Vulnerability created"));
    } catch (error) {
      return res.json(errorResponse(`Internal server error: ${error}`));
    }
  }
  if (type === "multiple") {
    // TODO
  }
}
export { getAll, get, create };
