import { Request, Response } from "express";
import { Vulnerability } from "models/vulnerability";
import { errorResponse, successResponse } from "utils/responseFormat";
import { fetchCVE } from "utils/vuln";

export async function get(req: Request, res: Response) {
  const { cveId: id } = req.params;
  const data = await fetchCVE(id);
  if (data instanceof Error) {
    return res.json(errorResponse(data.message));
  }
  return res.json(successResponse(data, "CVE fetched successfully"));
}

export async function getAll(req: Request, res: Response) {
  try {
    const vulns = await Vulnerability.find();
    return res.json(
      successResponse(vulns, "Vulnerabilities retrieved successfully")
    );
  } catch (error) {
    return res.json(errorResponse(`Internal server error: ${error}`));
  }
}

export async function create(req: Request, res: Response) {
  const { type, data } = req.body; // data is a string of one CVE or multiple CVE sepearted by comma
  if (type === "single") {
    try {
      const vulnExists = await Vulnerability.findOne({ cveId: data });
      if (vulnExists) {
        return res.json(errorResponse("Vulnerability already exists"));
      }
      const fetchedData = await fetchCVE(data);
      if (fetchedData instanceof Error) {
        return res.json(errorResponse(data.message));
      }
      const newVuln = await Vulnerability.create(fetchedData);
      return res.json(successResponse(newVuln, "Vulnerability created"));
    } catch (error) {
      return res.json(errorResponse(`Internal server error: ${error}`));
    }
  }
  if (type === "multiple") {
    const ids = data.split(",").map((id: string) => id.trim());
    for (const id of ids) {
      const vulnExists = await Vulnerability.findOne({ cveId: id });
      if (vulnExists) {
        continue;
      }
      const data = await fetchCVE(id);
      if (data instanceof Error) continue;
      await Vulnerability.create(data);
    }
    const vulns = await Vulnerability.find({
      cveId: {
        $in: ids,
      },
    });
    return res.json(successResponse(vulns, "Vulnerabilities created"));
  }
}
