import { Request, Response } from "express";
import { errorResponse, successResponse } from "../utils/responseFormat";
import { fetchVulnsFromNVD } from "../utils/vuln";
import {
  ProjectModel,
  TicketModel,
  VulnerabilityModel,
} from "../models/models";
import { isDocumentArray } from "@typegoose/typegoose";

export async function get(req: Request, res: Response) {
  const { cpe } = req.query;
  try {
    if (typeof cpe === "string") {
      const data = await fetchVulnsFromNVD(cpe);
      return res.json(successResponse(data, "CVEs fetched successfully"));
    }
  } catch (error) {
    return res.json(errorResponse(`Internal server error: ${error}`));
  }
}

export async function getResolveProgress(req: Request, res: Response) {
  const { projectName } = req.query;
  try {
    const tickets = await TicketModel.find({
      projectName,
    });
    const resolvedTickets = tickets.filter(
      (ticket) => ticket.status === "closed"
    );
    // Count number of resolved tickets
    let count = 0;
    resolvedTickets.forEach(
      (ticket) => (count += ticket.targetedVulnerability.length)
    );
    const project = await ProjectModel.findOne({ name: projectName }).populate({
      path: "phaseList",
      populate: {
        path: "artifacts",
      },
    });
    if (!project) {
      return res.json(errorResponse("Project does not exist"));
    }
    let total = 0;
    if (isDocumentArray(project.phaseList)) {
      project.phaseList.forEach((phase) => {
        if (isDocumentArray(phase.artifacts)) {
          phase.artifacts.forEach((artifact) => {
            total += artifact?.vulnerabilityList
              ? artifact.vulnerabilityList.length
              : 0;
          });
        }
      });
    }
    const response = {
      total,
      resolved: count,
    };
    return res.json(successResponse(response, "Progress fetched successfully"));
  } catch (error) {
    return res.json(errorResponse(`Internal server error: ${error}`));
  }
}
