{
  "version": 3,
  "sources": ["../src/app.ts"],
  "sourcesContent": ["import express from 'express'\nimport cors from 'cors'\nimport morgan from 'morgan'\nimport rateLimit from 'express-rate-limit'\nimport session from 'express-session'\nimport passport from 'passport'\nimport taskRoute from './routes/resources/task'\nimport thirdPartyRoute from './routes/resources/thirdParty'\nimport projectRoute from './routes/resources/project'\nimport phaseRoute from './routes/resources/phase'\nimport memberRoute from './routes/resources/member'\nimport activityRoute from './routes/resources/activityHistory'\nimport pmRoute from './routes/resources/projectManager'\nimport accountRoute from './routes/auth/account'\nimport initialize from './passport-config'\nimport { Account } from './models/account'\nimport { Request, Response } from 'express'\nconst app = express()\napp.use(express.json())\napp.use(cors({\n  origin: ['http://localhost:5173', 'https://client-dashboard.up.railway.app']\n}))\napp.use(morgan('dev'))\nconst limiter = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 150 // limit each IP to 150 requests per windowMs\n})\napp.use(limiter)\napp.get('/', (req: Request, res: Response) => {\n  res.send('server-dashboard API. Start using with /v1/{resource}')\n})\ninitialize(\n  passport,\n  (username: string) => Account.find({ username }),\n  (id: string) => Account.findById(id)\n)\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'secret',\n  resave: false,\n  saveUninitialized: false\n}))\napp.use(passport.initialize())\napp.use(passport.session())\napp.use('/v1/account', accountRoute)\napp.use('/v1/task', taskRoute)\napp.use('/v1/thirdParty', thirdPartyRoute)\napp.use('/v1/member', memberRoute)\napp.use('/v1/phase', phaseRoute)\napp.use('/v1/project', projectRoute)\napp.use('/v1/activity/github', activityRoute)\napp.use('/v1/pm', pmRoute)\n\nexport default app\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AACpB,kBAAiB;AACjB,oBAAmB;AACnB,gCAAsB;AACtB,6BAAoB;AACpB,sBAAqB;AACrB,kBAAsB;AACtB,wBAA4B;AAC5B,qBAAyB;AACzB,mBAAuB;AACvB,oBAAwB;AACxB,6BAA0B;AAC1B,4BAAoB;AACpB,qBAAyB;AACzB,6BAAuB;AACvB,IAAAA,kBAAwB;AAExB,MAAM,UAAM,eAAAC,SAAQ;AACpB,IAAI,IAAI,eAAAA,QAAQ,KAAK,CAAC;AACtB,IAAI,QAAI,YAAAC,SAAK;AAAA,EACX,QAAQ,CAAC,yBAAyB,yCAAyC;AAC7E,CAAC,CAAC;AACF,IAAI,QAAI,cAAAC,SAAO,KAAK,CAAC;AACrB,MAAM,cAAU,0BAAAC,SAAU;AAAA,EACxB,UAAU,IAAI,KAAK;AAAA,EACnB,KAAK;AACP,CAAC;AACD,IAAI,IAAI,OAAO;AACf,IAAI,IAAI,KAAK,CAAC,KAAc,QAAkB;AAC5C,MAAI,KAAK,uDAAuD;AAClE,CAAC;AAAA,IACD,uBAAAC;AAAA,EACE,gBAAAC;AAAA,EACA,CAAC,aAAqB,wBAAQ,KAAK,EAAE,SAAS,CAAC;AAAA,EAC/C,CAAC,OAAe,wBAAQ,SAAS,EAAE;AACrC;AACA,IAAI,QAAI,uBAAAC,SAAQ;AAAA,EACd,QAAQ,QAAQ,IAAI,kBAAkB;AAAA,EACtC,QAAQ;AAAA,EACR,mBAAmB;AACrB,CAAC,CAAC;AACF,IAAI,IAAI,gBAAAD,QAAS,WAAW,CAAC;AAC7B,IAAI,IAAI,gBAAAA,QAAS,QAAQ,CAAC;AAC1B,IAAI,IAAI,eAAe,eAAAE,OAAY;AACnC,IAAI,IAAI,YAAY,YAAAC,OAAS;AAC7B,IAAI,IAAI,kBAAkB,kBAAAC,OAAe;AACzC,IAAI,IAAI,cAAc,cAAAC,OAAW;AACjC,IAAI,IAAI,aAAa,aAAAC,OAAU;AAC/B,IAAI,IAAI,eAAe,eAAAC,OAAY;AACnC,IAAI,IAAI,uBAAuB,uBAAAC,OAAa;AAC5C,IAAI,IAAI,UAAU,sBAAAC,OAAO;AAEzB,IAAO,cAAQ;",
  "names": ["import_account", "express", "cors", "morgan", "rateLimit", "initialize", "passport", "session", "accountRoute", "taskRoute", "thirdPartyRoute", "memberRoute", "phaseRoute", "projectRoute", "activityRoute", "pmRoute"]
}
