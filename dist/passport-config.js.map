{
  "version": 3,
  "sources": ["../src/passport-config.ts"],
  "sourcesContent": ["import bcrypt from 'bcrypt'\nimport { PassportStatic } from 'passport'\n\nconst LocalStrategy = require('passport-local').Strategy\n\nfunction initialize (passport: PassportStatic, getAccountByUsername: Function, getAccountById: Function) {\n  const authenticateUser = async (username: string, password: string, done: Function) => {\n    const account = getAccountByUsername(username)\n    if (account == null) {\n      return done(null, false, { message: 'No user with that username' })\n    }\n\n    try {\n      if (await bcrypt.compare(password, account.account.password)) {\n        return done(null, account)\n      }\n      return done(null, false, { message: 'Password incorrect' })\n    } catch (e) {\n      return done(e)\n    }\n  }\n\n  passport.use(new LocalStrategy({ usernameField: 'username' }, authenticateUser))\n  passport.serializeUser((account, done) => done(null, account.id))\n  passport.deserializeUser((id, done) => done(null, getAccountById(id)))\n}\n\nexport default initialize\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmB;AAGnB,MAAM,gBAAgB,QAAQ,gBAAgB,EAAE;AAEhD,SAAS,WAAY,UAA0B,sBAAgC,gBAA0B;AACvG,QAAM,mBAAmB,OAAO,UAAkB,UAAkB,SAAmB;AACrF,UAAM,UAAU,qBAAqB,QAAQ;AAC7C,QAAI,WAAW,MAAM;AACnB,aAAO,KAAK,MAAM,OAAO,EAAE,SAAS,6BAA6B,CAAC;AAAA,IACpE;AAEA,QAAI;AACF,UAAI,MAAM,cAAAA,QAAO,QAAQ,UAAU,QAAQ,QAAQ,QAAQ,GAAG;AAC5D,eAAO,KAAK,MAAM,OAAO;AAAA,MAC3B;AACA,aAAO,KAAK,MAAM,OAAO,EAAE,SAAS,qBAAqB,CAAC;AAAA,IAC5D,SAAS,GAAP;AACA,aAAO,KAAK,CAAC;AAAA,IACf;AAAA,EACF;AAEA,WAAS,IAAI,IAAI,cAAc,EAAE,eAAe,WAAW,GAAG,gBAAgB,CAAC;AAC/E,WAAS,cAAc,CAAC,SAAS,SAAS,KAAK,MAAM,QAAQ,EAAE,CAAC;AAChE,WAAS,gBAAgB,CAAC,IAAI,SAAS,KAAK,MAAM,eAAe,EAAE,CAAC,CAAC;AACvE;AAEA,IAAO,0BAAQ;",
  "names": ["bcrypt"]
}
