{
  "version": 3,
  "sources": ["../../../src/controllers/auth/account.controller.ts"],
  "sourcesContent": ["import 'dotenv/config'\nimport bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport { Member } from '../../models/member'\nimport { ProjectManager } from '../../models/projectManager'\nimport { Account } from '../../models/account'\nimport { successResponse, errorResponse } from '../../utils/responseFormat'\nimport { Request, Response } from 'express'\nimport { ThirdParty } from '../../models/thirdParty'\nimport { Types } from 'mongoose'\nasync function getRole(accountId: Types.ObjectId) {\n  const member = await Member.findOne({ account: accountId })\n  const projectManager = await ProjectManager.findOne({ account: accountId })\n  if (member != null) {\n    return {\n      role: 'member',\n      id: member._id\n    }\n  }\n  if (projectManager != null) {\n    return {\n      role: 'projectManager',\n      id: projectManager._id\n    }\n  }\n  return null\n}\n\nasync function get(req: Request, res: Response) {\n  try {\n    const account = await Account.findById(req.params.id)\n    return res.status(200).json(successResponse(account, 'Account found'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function create(req: Request, res: Response) {\n  const { username, password, email } = req.body\n  // Check if account exists\n  const accountExists = await Account.findOne({ username })\n  if (accountExists != null) {\n    return res.status(409).json(errorResponse('Username already exists'))\n  }\n  // Hash password\n  const hashedPassword = await bcrypt.hash(password, 10)\n  // Create account\n  try {\n    const newAccount = new Account({\n      username,\n      password: hashedPassword,\n      email\n    })\n    await newAccount.save()\n    return res.status(201).json(successResponse(newAccount, 'Account created'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function login(req: Request, res: Response) {\n  const { username, password } = req.body\n  const account = await Account.findOne({ username })\n  if (account == null) {\n    return res.status(404).json(errorResponse('Username not found'))\n  }\n  try {\n    const { _id: accountId } = account\n    const result = await bcrypt.compare(password, account.password)\n    if (result) {\n      if (process.env.ACCESS_TOKEN_SECRET === undefined || process.env.REFRESH_TOKEN_SECRET === undefined) {\n        return res.status(500).json(errorResponse('Internal server error'))\n      }\n      const accessToken = jwt.sign({ accountId }, process.env.ACCESS_TOKEN_SECRET)\n      const refreshToken = jwt.sign({ accountId }, process.env.REFRESH_TOKEN_SECRET)\n      const roleObject = await getRole(accountId)\n      if (roleObject === null) {\n        return res.status(500).json(errorResponse('Cannot find role'))\n      }\n      const { role, id } = roleObject\n      const data = {\n        role, id, username, accessToken, refreshToken\n      }\n      return res.status(201).json(successResponse(data, 'Login successful'))\n    }\n    return res.status(401).json(errorResponse('Incorrect password'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function addThirdPartyToAccount(req: Request, res: Response) {\n  // Check if account exists\n  const account = await Account.findById(req.params.id)\n  if (account == null) {\n    return res.status(404).json(errorResponse('Account not found'))\n  }\n  // Add third party account to account\n  try {\n    const { name, username, url } = req.body\n    const newThirdParty = new ThirdParty({\n      name,\n      username,\n      url\n    })\n    account.thirdParty.push(newThirdParty)\n    await account.save()\n    return res.status(200).json(successResponse(account, 'Third party account added'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function changePassword(req: Request, res: Response) {\n  const { oldPassword, newPassword } = req.body\n  if (!oldPassword || !newPassword) {\n    return res.status(400).json(errorResponse('Missing old or new password'))\n  }\n  // Check if account exists\n  const account = await Account.findById(req.params.id)\n  if (account == null) {\n    return res.status(404).json(errorResponse('Account not found'))\n  }\n  // Check if old password is correct\n  const isMatch = await bcrypt.compare(oldPassword, account.password)\n  if (!isMatch) {\n    return res.status(400).json(errorResponse('Incorrect old password'))\n  }\n  // Hash new password\n  const hashedPassword = await bcrypt.hash(newPassword, 10)\n  // Change password\n  account.password = hashedPassword\n  await account.save()\n  return res.status(200).json(successResponse(account, 'Password changed'))\n}\n\nexport {\n  get, create, login, addThirdPartyToAccount, changePassword\n}\n"],
  "mappings": "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",
  "names": ["bcrypt", "jwt"]
}
