{
  "version": 3,
  "sources": ["../../../src/controllers/resources/thirdParty.controller.ts"],
  "sourcesContent": ["import { ThirdParty } from '../../models/thirdParty'\nimport { errorResponse, successResponse } from '../../utils/responseFormat'\nimport { Request, Response } from 'express'\nimport { CallbackError, Document } from 'mongoose'\nasync function getAll(req: Request, res: Response) {\n  try {\n    const thirdParties = await ThirdParty.find()\n    return res.status(200).json(successResponse(thirdParties, 'Third parties found'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function get(req: Request, res: Response) {\n  try {\n    const thirdParty = await ThirdParty.findById(req.params.id)\n    return res.status(200).json(successResponse(thirdParty, 'Third party found'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function create(req: Request, res: Response) {\n  try {\n    const newThirdParty = new ThirdParty(req.body)\n    await newThirdParty.save()\n    return res.status(201).json(successResponse(newThirdParty, 'Third party created'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function update(req: Request, res: Response) {\n  try {\n    const updatedThirdParty = await ThirdParty.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n\n      { new: true }\n    )\n    return res.status(200).json(successResponse(updatedThirdParty, 'Third party updated'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function remove(req: Request, res: Response) {\n  ThirdParty.findByIdAndDelete(req.params.id, (err: CallbackError, doc: Document) => {\n    if (err != null) {\n      return res.status(500).json(errorResponse('Internal server error'))\n    }\n    if (!doc) {\n      return res.status(404).json(errorResponse('Third party not found'))\n    }\n    return res.status(200).json(successResponse(doc, 'Third party deleted'))\n  })\n}\n\nexport {\n  get,\n  getAll,\n  create,\n  update,\n  remove\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA2B;AAC3B,4BAA+C;AAG/C,eAAe,OAAO,KAAc,KAAe;AACjD,MAAI;AACF,UAAM,eAAe,MAAM,6BAAW,KAAK;AAC3C,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,cAAc,qBAAqB,CAAC;AAAA,EAClF,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,IAAI,KAAc,KAAe;AAC9C,MAAI;AACF,UAAM,aAAa,MAAM,6BAAW,SAAS,IAAI,OAAO,EAAE;AAC1D,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,YAAY,mBAAmB,CAAC;AAAA,EAC9E,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,OAAO,KAAc,KAAe;AACjD,MAAI;AACF,UAAM,gBAAgB,IAAI,6BAAW,IAAI,IAAI;AAC7C,UAAM,cAAc,KAAK;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,eAAe,qBAAqB,CAAC;AAAA,EACnF,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,OAAO,KAAc,KAAe;AACjD,MAAI;AACF,UAAM,oBAAoB,MAAM,6BAAW;AAAA,MACzC,IAAI,OAAO;AAAA,MACX,IAAI;AAAA,MAEJ,EAAE,KAAK,KAAK;AAAA,IACd;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,mBAAmB,qBAAqB,CAAC;AAAA,EACvF,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,OAAO,KAAc,KAAe;AACjD,+BAAW,kBAAkB,IAAI,OAAO,IAAI,CAAC,KAAoB,QAAkB;AACjF,QAAI,OAAO,MAAM;AACf,aAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,IACpE;AACA,QAAI,CAAC,KAAK;AACR,aAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,IACpE;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,KAAK,qBAAqB,CAAC;AAAA,EACzE,CAAC;AACH;",
  "names": []
}
