{
  "version": 3,
  "sources": ["../../../src/controllers/resources/phase.controller.ts"],
  "sourcesContent": ["import { Phase } from '../../models/phase'\nimport { errorResponse, successResponse } from '../../utils/responseFormat'\nimport { Request, Response } from 'express'\nimport { CallbackError, Document } from 'mongoose'\nasync function get (req: Request, res: Response) {\n  try {\n    const phase = await Phase.findById(req.params.id)\n    return res.status(200).json(successResponse(phase, 'Phase found'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function create (req: Request, res: Response) {\n  try {\n    const newPhase = new Phase(req.body)\n    await newPhase.save()\n    return res.status(201).json(successResponse(newPhase, 'Phase created'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function update (req: Request, res: Response) {\n  try {\n    const updatedPhase = await Phase.findByIdAndUpdate(req.params.id, req.body, { new: true })\n    return res.status(200).json(successResponse(updatedPhase, 'Phase updated'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function remove (req: Request, res: Response) {\n  Phase.findByIdAndDelete(req.params.id, (err: CallbackError, doc: Document) => {\n    if (err != null) {\n      return res.status(500).json(errorResponse('Internal server error'))\n    }\n    if (!doc) {\n      return res.status(404).json(errorResponse('Phase not found'))\n    }\n    return res.status(200).json(successResponse(doc, 'Phase deleted'))\n  })\n}\n\nasync function addTaskToPhase (req: Request, res: Response) {\n  try {\n    const updatedPhase = await Phase.findByIdAndUpdate(\n      req.params.id,\n      { $addToSet: { tasks: req.body.taskId } },\n\n      { new: true }\n    )\n    return res.status(200).json(successResponse(updatedPhase, 'Task added to phase'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nexport {\n  get,\n  create,\n  update,\n  remove,\n  addTaskToPhase\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAsB;AACtB,4BAA+C;AAG/C,eAAe,IAAK,KAAc,KAAe;AAC/C,MAAI;AACF,UAAM,QAAQ,MAAM,mBAAM,SAAS,IAAI,OAAO,EAAE;AAChD,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,OAAO,aAAa,CAAC;AAAA,EACnE,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,OAAQ,KAAc,KAAe;AAClD,MAAI;AACF,UAAM,WAAW,IAAI,mBAAM,IAAI,IAAI;AACnC,UAAM,SAAS,KAAK;AACpB,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,UAAU,eAAe,CAAC;AAAA,EACxE,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,OAAQ,KAAc,KAAe;AAClD,MAAI;AACF,UAAM,eAAe,MAAM,mBAAM,kBAAkB,IAAI,OAAO,IAAI,IAAI,MAAM,EAAE,KAAK,KAAK,CAAC;AACzF,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,cAAc,eAAe,CAAC;AAAA,EAC5E,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,OAAQ,KAAc,KAAe;AAClD,qBAAM,kBAAkB,IAAI,OAAO,IAAI,CAAC,KAAoB,QAAkB;AAC5E,QAAI,OAAO,MAAM;AACf,aAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,IACpE;AACA,QAAI,CAAC,KAAK;AACR,aAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,iBAAiB,CAAC;AAAA,IAC9D;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,KAAK,eAAe,CAAC;AAAA,EACnE,CAAC;AACH;AAEA,eAAe,eAAgB,KAAc,KAAe;AAC1D,MAAI;AACF,UAAM,eAAe,MAAM,mBAAM;AAAA,MAC/B,IAAI,OAAO;AAAA,MACX,EAAE,WAAW,EAAE,OAAO,IAAI,KAAK,OAAO,EAAE;AAAA,MAExC,EAAE,KAAK,KAAK;AAAA,IACd;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,cAAc,qBAAqB,CAAC;AAAA,EAClF,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;",
  "names": []
}
