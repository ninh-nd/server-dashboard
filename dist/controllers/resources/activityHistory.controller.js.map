{
  "version": 3,
  "sources": ["../../../src/controllers/resources/activityHistory.controller.ts"],
  "sourcesContent": ["import { Octokit } from 'octokit'\nimport { Account } from '../../models/account'\nimport { ActivityHistory } from '../../models/activityHistory'\nimport { Member } from '../../models/member'\nimport { GithubConfig } from '../../models/githubConfig'\nimport { Project } from '../../models/project'\nimport { errorResponse, successResponse } from '../../utils/responseFormat'\nimport { DEFAULT_TTL, redisClient } from '../../redis'\nimport { Request, Response } from 'express'\nimport { Types } from 'mongoose'\nasync function getGithubPull(owner: string, repo: string, accessToken: string, projectId: Types.ObjectId) {\n  const cache = await redisClient.get(`github-pr-${repo}`)\n  if (cache) {\n    return true\n  }\n  const octokit = new Octokit({\n    auth: accessToken\n  })\n  const prData = await octokit.rest.pulls.list({\n    owner,\n    repo,\n    state: 'all'\n  })\n  await redisClient.setEx(`github-pr-${repo}`, DEFAULT_TTL, JSON.stringify(prData))\n  const processedPrData = prData.data.map(({\n    id, title: content, created_at: createdAt, user: { login: createdBy },\n  }) => ({\n    id, action: 'pr', content, createdAt, createdBy, projectId\n  }))\n  try {\n    await ActivityHistory.insertMany(\n      [...processedPrData],\n      { ordered: false }\n    )\n    // Add history to each member in the project\n    const history = await ActivityHistory.find({ projectId })\n    const members = await Member.find({ projectIn: projectId })\n    members.forEach(async (member) => {\n      // Temporary solution as Github is the only third party\n      const account = await Account.findById(member.account)\n      if (account == null) {\n        return new Error(\"Can't find account\")\n      }\n      const thirdPartyUsername = account.thirdParty[0].username\n      const memberHistory = history.filter(\n        ({ createdBy }) => createdBy === thirdPartyUsername\n      )\n      await Member.findByIdAndUpdate(\n        member._id,\n        { $addToSet: { activityHistory: memberHistory } },\n        { new: true }\n      )\n    })\n    return true\n  } catch (error) {\n    return new Error(\"Error retrieving PRs from Github API\")\n  }\n}\n\nasync function getGithubCommits(owner: string, repo: string, accessToken: string, projectId: Types.ObjectId) {\n  const cache = await redisClient.get(`github-commit-${repo}`)\n  if (cache) {\n    return true\n  }\n  const octokit = new Octokit({\n    auth: accessToken\n  })\n  const commitData = await octokit.rest.repos.listCommits({\n    owner,\n    repo\n  })\n  await redisClient.setEx(`github-commit-${repo}`, DEFAULT_TTL, JSON.stringify(commitData))\n  const processedCommitData = commitData.data.map(({\n    sha: id, commit:\n    { message: content, author: { name: createdBy, date: createdAt } }\n  }) => ({\n    id, action: 'commit', content, createdAt, createdBy, projectId\n  }))\n  try {\n    await ActivityHistory.insertMany(\n      [...processedCommitData],\n      { ordered: false }\n    )\n    // Add history to each member in the project\n    const history = await ActivityHistory.find({ projectId })\n    const members = await Member.find({ projectIn: projectId })\n    members.forEach(async (member) => {\n      // Temporary solution as Github is the only third party\n      const account = await Account.findById(member.account)\n      if (account == null) {\n        return new Error(\"Can't find account\")\n      }\n      const thirdPartyUsername = account.thirdParty[0].username\n      const memberHistory = history.filter(\n        ({ createdBy }) => createdBy === thirdPartyUsername\n      )\n      await Member.findByIdAndUpdate(\n        member._id,\n        { $addToSet: { activityHistory: memberHistory } },\n        { new: true }\n      )\n    })\n    return true\n  } catch (error) {\n    return new Error(\"Error retrieving commits from Github API\")\n  }\n}\n\nasync function getPRs(req: Request, res: Response) {\n  const { projectName } = req.params\n  const githubConfig = await GithubConfig.findOne({ name: projectName }).populate('projectId')\n  if (githubConfig == null) {\n    return res.status(404).json(errorResponse('No github config found'))\n  }\n  const {\n    accessToken, owner, repo, projectId\n  } = githubConfig\n  const result = await getGithubPull(owner, repo, accessToken, projectId)\n  if (result instanceof Error) {\n    return res.json(errorResponse(`Error retrieving PRs: ${result.message}`))\n  }\n  try {\n    const prs = await ActivityHistory.find({ projectId, action: 'pr' })\n    const total = prs.length\n    const authorArray = prs.map((pr) => pr.createdBy)\n    const uniqueAuthors = [...new Set(authorArray)]\n    const individualContribution: Array<{ author: string, total: number }> = []\n    uniqueAuthors.forEach((author) => {\n      const prOfAnAuthor = prs.filter((pr) => pr.createdBy === author)\n      const totalOfAnAuthor = prOfAnAuthor.length\n      if (author) {\n        individualContribution.push({ author, total: totalOfAnAuthor })\n      }\n    })\n    const data = { total, contribution: individualContribution }\n    return res.status(200).json(successResponse(data, 'Successfully retrieved PRs'))\n  } catch (error) {\n    return res.json(errorResponse('Error retrieving PRs'))\n  }\n}\n\nasync function getCommits(req: Request, res: Response) {\n  const { projectName } = req.params\n  const githubConfig = await GithubConfig.findOne({ name: projectName }).populate('projectId')\n  if (githubConfig == null) {\n    return res.status(404).json(errorResponse('No github config found'))\n  }\n  const {\n    accessToken, owner, repo, projectId\n  } = githubConfig\n  const result = await getGithubCommits(owner, repo, accessToken, projectId)\n  if (result instanceof Error) {\n    return res.json(errorResponse(`Error retrieving commits: ${result.message}`))\n  }\n  try {\n    const commits = await ActivityHistory.find({ projectId, action: 'commit' })\n    const total = commits.length\n    const authorArray = commits.map((cm) => cm.createdBy)\n    const uniqueAuthors = [...new Set(authorArray)]\n    const individualContribution: Array<{ author: string, total: number }> = []\n    uniqueAuthors.forEach((author) => {\n      const prOfAnAuthor = commits.filter((cm) => cm.createdBy === author)\n      const totalOfAnAuthor = prOfAnAuthor.length\n      if (author) {\n        individualContribution.push({ author, total: totalOfAnAuthor })\n      }\n    })\n    const data = { total, contribution: individualContribution }\n    return res.status(200).json(successResponse(data, 'Successfully retrieved commits'))\n  } catch (error) {\n    return res.json(errorResponse('Error retrieving commits'))\n  }\n}\n\nasync function getCommitsByAccount(req: Request, res: Response) {\n  const { username, projectName } = req.params\n  try {\n    const projectId = await Project.findOne({ name: projectName })\n    if (projectId == null) {\n      return res.status(404).json(errorResponse('No project found'))\n    }\n    const user = await Account.findOne({ username })\n    if (user == null) {\n      return res.status(404).json(errorResponse('No user found'))\n    }\n    // Get the account linked to the internal account\n    const commits = await ActivityHistory.find({ createdBy: user.thirdParty[0].username, action: 'commit', projectId })\n    const result = { total: commits.length, commits }\n    return res.status(200).json(successResponse(result, 'Successfully retrieved commits'))\n  } catch (error) {\n    return res.json(errorResponse('Error retrieving commits'))\n  }\n}\n\nasync function getPRsByAccount(req: Request, res: Response) {\n  const { username, projectName } = req.params\n  try {\n    const projectId = await Project.findOne({ name: projectName })\n    if (projectId == null) {\n      return res.status(404).json(errorResponse('No project found'))\n    }\n    const user = await Account.findOne({ username })\n    if (user == null) {\n      return res.status(404).json(errorResponse('No user found'))\n    }\n    // Get the account linked to the internal account\n    const prs = await ActivityHistory.find({ createdBy: user.thirdParty[0].username, action: 'pr', projectId })\n    const result = { total: prs.length, prs }\n    return res.status(200).json(successResponse(result, 'Successfully retrieved PRs'))\n  } catch (error) {\n    return res.json(errorResponse('Error retrieving PRs'))\n  }\n}\n\nexport {\n  getPRs,\n  getCommits,\n  getCommitsByAccount,\n  getPRsByAccount\n}\n"],
  "mappings": "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",
  "names": []
}
