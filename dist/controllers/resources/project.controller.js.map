{
  "version": 3,
  "sources": ["../../../src/controllers/resources/project.controller.ts"],
  "sourcesContent": ["import { Project } from '../../models/project'\nimport { Member } from '../../models/member'\nimport { errorResponse, successResponse } from '../../utils/responseFormat'\nimport { Request, Response } from 'express'\nasync function get (req: Request, res: Response) {\n  try {\n    const { projectName } = req.params\n    const project = await Project.findOne({ name: projectName }).populate({\n      path: 'phaseList',\n      populate: {\n        path: 'tasks'\n      }\n    })\n    return res.status(200).json(successResponse(project, 'Project found'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function create (req: Request, res: Response) {\n  try {\n    const project = await Project.create(req.body)\n    return res.status(201).json(successResponse(project, 'Project created'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function updateStatus (req: Request, res: Response) {\n  try {\n    const { projectName } = req.params\n    const { status } = req.body\n    const project = await Project.findOneAndUpdate(\n      { name: projectName },\n      { status },\n\n      { new: true }\n    )\n    return res.status(200).json(successResponse(project, 'Project status updated'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function addPhaseToProject (req: Request, res: Response) {\n  try {\n    const { projectName } = req.params\n    const { phaseId } = req.body\n    const project = await Project.findOneAndUpdate(\n      { name: projectName },\n      {\n        $addToSet: {\n          phaseList: phaseId\n        }\n      },\n      { new: true }\n    )\n    return res.status(200).json(successResponse(project, 'Phase added to project'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function remove (req: Request, res: Response) {\n  try {\n    const { projectName } = req.params\n    const project = await Project.findOne({ name: projectName })\n    if (project == null) {\n      return res.status(404).json(errorResponse('Project not found'))\n    }\n    // Check if the project has just been created for 1 day\n    if (project.createdAt.getTime() + 86400000 > Date.now()) {\n      return res.status(403).json(errorResponse('Project cannot be deleted'))\n    }\n\n    await Project.findByIdAndDelete(req.params.id)\n    return res.status(200).json(successResponse(project, 'Project deleted'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function getProjectMembers (req: Request, res: Response) {\n  try {\n    const { projectName } = req.params\n    const project = await Project.findOne({ name: projectName })\n    if (project == null) {\n      return res.status(404).json(errorResponse('Project not found'))\n    }\n    const members = await Member.find({ projectId: project._id }).populate('activityHistory').populate('taskAssigned')\n    return res.status(200).json(successResponse(members, 'Members found'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nexport {\n  get,\n  create,\n  updateStatus,\n  addPhaseToProject,\n  remove,\n  getProjectMembers\n}\n"],
  "mappings": "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",
  "names": []
}
