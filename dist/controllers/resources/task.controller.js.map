{
  "version": 3,
  "sources": ["../../../src/controllers/resources/task.controller.ts"],
  "sourcesContent": ["import { Request, Response } from 'express'\nimport { Task } from '../../models/task'\nimport { errorResponse, successResponse } from '../../utils/responseFormat'\nimport { CallbackError, Document } from 'mongoose'\nasync function getAll (req: Request, res: Response) {\n  try {\n    const tasks = await Task.find()\n    return res.status(200).json(successResponse(tasks, 'Tasks found'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function get (req: Request, res: Response) {\n  try {\n    const task = await Task.findById(req.params.id)\n    return res.status(200).json(successResponse(task, 'Task found'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function create (req: Request, res: Response) {\n  try {\n    const newTask = new Task(req.body)\n    await newTask.save()\n    return res.status(201).json(successResponse(newTask, 'Task created'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function update (req: Request, res: Response) {\n  try {\n    const updatedTask = await Task.findByIdAndUpdate(req.params.id, req.body, { new: true })\n    return res.status(200).json(successResponse(updatedTask, 'Task updated'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function remove (req: Request, res: Response) {\n  Task.findByIdAndDelete(req.params.id, (err: CallbackError, doc: Document) => {\n    if (err != null) {\n      return res.status(500).json(errorResponse('Internal server error'))\n    }\n    if (!doc) {\n      return res.status(404).json(errorResponse('Task not found'))\n    }\n    return res.status(200).json(successResponse(doc, 'Task deleted'))\n  })\n}\n\nexport {\n  get,\n  getAll,\n  create,\n  update,\n  remove\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAAqB;AACrB,4BAA+C;AAE/C,eAAe,OAAQ,KAAc,KAAe;AAClD,MAAI;AACF,UAAM,QAAQ,MAAM,iBAAK,KAAK;AAC9B,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,OAAO,aAAa,CAAC;AAAA,EACnE,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,IAAK,KAAc,KAAe;AAC/C,MAAI;AACF,UAAM,OAAO,MAAM,iBAAK,SAAS,IAAI,OAAO,EAAE;AAC9C,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,MAAM,YAAY,CAAC;AAAA,EACjE,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,OAAQ,KAAc,KAAe;AAClD,MAAI;AACF,UAAM,UAAU,IAAI,iBAAK,IAAI,IAAI;AACjC,UAAM,QAAQ,KAAK;AACnB,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,SAAS,cAAc,CAAC;AAAA,EACtE,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,OAAQ,KAAc,KAAe;AAClD,MAAI;AACF,UAAM,cAAc,MAAM,iBAAK,kBAAkB,IAAI,OAAO,IAAI,IAAI,MAAM,EAAE,KAAK,KAAK,CAAC;AACvF,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,aAAa,cAAc,CAAC;AAAA,EAC1E,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,OAAQ,KAAc,KAAe;AAClD,mBAAK,kBAAkB,IAAI,OAAO,IAAI,CAAC,KAAoB,QAAkB;AAC3E,QAAI,OAAO,MAAM;AACf,aAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,IACpE;AACA,QAAI,CAAC,KAAK;AACR,aAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,gBAAgB,CAAC;AAAA,IAC7D;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,KAAK,cAAc,CAAC;AAAA,EAClE,CAAC;AACH;",
  "names": []
}
