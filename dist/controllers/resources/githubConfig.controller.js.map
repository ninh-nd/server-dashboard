{
  "version": 3,
  "sources": ["../../../src/controllers/resources/githubConfig.controller.ts"],
  "sourcesContent": ["import mongoose from 'mongoose'\nimport { GithubConfig } from '../../models/githubConfig'\nimport { errorResponse, successResponse } from '../../utils/responseFormat'\nimport { Request, Response } from 'express'\nasync function get (req: Request, res: Response) {\n  const { id } = req.params\n  if (!mongoose.Types.ObjectId.isValid(id)) {\n    return res.status(400).json(errorResponse('Invalid project id'))\n  }\n  try {\n    const githubConfig = await GithubConfig.findOne({ projectId: id })\n    if (githubConfig != null) {\n      return res.status(200).json(successResponse(githubConfig, 'Github config found'))\n    }\n    return res.status(404).json(errorResponse('No Github config found'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function create (req: Request, res: Response) {\n  const githubConfig = new GithubConfig(req.body)\n  try {\n    const newGithubConfig = await githubConfig.save()\n    return res.status(201).json(successResponse(newGithubConfig, 'Github config created'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nasync function update (req: Request, res: Response) {\n  const { id } = req.params\n  try {\n    const githubConfig = await GithubConfig.findOneAndUpdate(\n      { projectId: id },\n      req.body,\n\n      { new: true }\n    )\n    if (githubConfig != null) {\n      return res.status(200).json(successResponse(githubConfig, 'Github config updated'))\n    }\n    return res.status(404).json(errorResponse('No Github config found'))\n  } catch (error) {\n    return res.status(500).json(errorResponse('Internal server error'))\n  }\n}\n\nexport {\n  get,\n  create,\n  update\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAqB;AACrB,0BAA6B;AAC7B,4BAA+C;AAE/C,eAAe,IAAK,KAAc,KAAe;AAC/C,QAAM,EAAE,GAAG,IAAI,IAAI;AACnB,MAAI,CAAC,gBAAAA,QAAS,MAAM,SAAS,QAAQ,EAAE,GAAG;AACxC,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,oBAAoB,CAAC;AAAA,EACjE;AACA,MAAI;AACF,UAAM,eAAe,MAAM,iCAAa,QAAQ,EAAE,WAAW,GAAG,CAAC;AACjE,QAAI,gBAAgB,MAAM;AACxB,aAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,cAAc,qBAAqB,CAAC;AAAA,IAClF;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,wBAAwB,CAAC;AAAA,EACrE,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,OAAQ,KAAc,KAAe;AAClD,QAAM,eAAe,IAAI,iCAAa,IAAI,IAAI;AAC9C,MAAI;AACF,UAAM,kBAAkB,MAAM,aAAa,KAAK;AAChD,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,iBAAiB,uBAAuB,CAAC;AAAA,EACvF,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;AAEA,eAAe,OAAQ,KAAc,KAAe;AAClD,QAAM,EAAE,GAAG,IAAI,IAAI;AACnB,MAAI;AACF,UAAM,eAAe,MAAM,iCAAa;AAAA,MACtC,EAAE,WAAW,GAAG;AAAA,MAChB,IAAI;AAAA,MAEJ,EAAE,KAAK,KAAK;AAAA,IACd;AACA,QAAI,gBAAgB,MAAM;AACxB,aAAO,IAAI,OAAO,GAAG,EAAE,SAAK,uCAAgB,cAAc,uBAAuB,CAAC;AAAA,IACpF;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,wBAAwB,CAAC;AAAA,EACrE,SAAS,OAAP;AACA,WAAO,IAAI,OAAO,GAAG,EAAE,SAAK,qCAAc,uBAAuB,CAAC;AAAA,EACpE;AACF;",
  "names": ["mongoose"]
}
